name: container-build-2

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Push the container image to the registry"
        type: boolean
        required: false
        default: false
      container_image_vulnerability_scan:
        description: "Scan the container image for vulnerabilities"
        type: boolean
        required: false
        default: true
      container_image_sign:
        description: "SBOM + Sign the container image"
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      container_registry_push:
        type: boolean
        required: true
      release_tag:
        type: string
        required: true
  push:
    branches-ignore:
      - renovate/*
    paths:
      - Dockerfile
      - .github/workflows/container-build-2.yml
  # schedule:
  #   - cron: "0 7 4 * *"

permissions:
  actions: read
  # id-token: write # for creating OIDC tokens for signing
  # contents: write
  # security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  # keep-sorted start
  container_image_authors: petr.ruzicka@gmail.com
  container_image_authors_name: Petr Ruzicka
  container_image_category: security
  container_image_dockerfile_location: Dockerfile
  container_image_logo_url: https://raw.githubusercontent.com/MISP/intelligence-icons/513abc840b7ac92e4f8a4a7ecab2964007bf25f5/svg/threat_actor.svg
  container_image_platforms: linux/amd64,linux/arm64
  container_image_repository_url: https://quay.io/repository/petr_ruzicka/malware-cryptominer-container?tab=tags
  container_image_vendor: MyCompany
  container_registries: |
    # - registry: ghcr.io
    #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container
    #   username: ${{ github.actor }}
    #   password: ${{ secrets.GITHUB_TOKEN }}
    # - registry: quay.io
    #   image_name: quay.io/petr_ruzicka/malware-cryptominer-container
    #   username: ${{ secrets.container_registry_user }}
    #   password: ${{ secrets.container_registry_password }}
    # - registry: c8n.io
    #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container
    #   username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
    #   password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
    # - registry: docker.io
    #   image_name: docker.io/peru/malware-cryptominer-container
    #   username: ${{ secrets.dockerhub_container_registry_user }}
    #   password: ${{ secrets.dockerhub_container_registry_password }}
    # keep-sorted start
    # - registry: c8n.io
    #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container-test
    #   username: ${{ secrets.c8n_container_registry_user }}
    #   password: ${{ secrets.c8n_container_registry_password }}
    # - registry: docker.io
    #   image_name: docker.io/peru/malware-cryptominer-container-test
    #   username: ${{ secrets.dockerhub_container_registry_user }}
    #   password: ${{ secrets.dockerhub_container_registry_password }}
    # - registry: ghcr.io
    #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container-test
    #   username: ${{ github.actor }}
    #   password: ${{ secrets.GITHUB_TOKEN }}
    - registry: quay.io
      image_name: quay.io/petr_ruzicka/malware-cryptominer-container-test
      username: ${{ secrets.quay_container_registry_user }}
      password: ${{ secrets.quay_container_registry_password }}
    # keep-sorted end
  # Push the container image to the registry when triggered by a scheduled execution or a push to the default branch
  container_registry_push_image: ${{ github.event_name == 'schedule' || inputs.container_registry_push || (github.ref_name == github.event.repository.default_branch && github.event_name == 'push') }}
  # keep-sorted end

jobs:
  container-build:
    name: Build Container Image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # - name: Install Syft
      #   uses: anchore/sbom-action/download-syft@v0.17.9

      # There is no way how to use docker/login-action for multiple registries in the same job - so we have to do it using "docker login"
      - name: Login to docker + set variables
        id: variables
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
          CONTAINER_IMAGE_DOCKERFILE_LOCATION: ${{ env.container_image_dockerfile_location }}
          CONTAINER_IMAGE_VULNERABILITY_SCAN: ${{ inputs.container_image_vulnerability_scan }}
        run: |
          # Login to all registries
          readarray CONTAINER_REGISTRIES_ARRAY < <(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 '.[]')
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            REGISTRY=$(echo "${CONTAINER_REGISTRY}" | jq -r '.registry')
            USERNAME=$(echo "${CONTAINER_REGISTRY}" | jq -r '.username')
            PASSWORD=$(echo "${CONTAINER_REGISTRY}" | jq -r '.password')
            echo "${PASSWORD}" | docker login "${REGISTRY}" --username "${USERNAME}" --password-stdin
          done

          if [[ "${CONTAINER_IMAGE_VULNERABILITY_SCAN}" == "true" ]]; then
            echo "CONTAINER_IMAGE_VULNERABILITY_SCAN=1" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "CONTAINER_IMAGE_VULNERABILITY_SCAN=0" | tee -a "${GITHUB_OUTPUT}"
          fi

          # Create list of image names for docker/metadata-action ("images" parameter)
          DOCKER_METADATA_IMAGES_NAMES=$(yq e -o=j -I=0 -r '.[].image_name' <<< "${CONTAINER_REGISTRIES}")
          echo "DOCKER_METADATA_IMAGES_NAMES=${DOCKER_METADATA_IMAGES_NAMES}" | tee -a "${GITHUB_ENV}"

          # Get the directory where the Dockerfile is located
          echo "CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY=$(dirname "${CONTAINER_IMAGE_DOCKERFILE_LOCATION}")" | tee -a "${GITHUB_OUTPUT}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build container image and push it to local container registry
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        id: docker-build-push-temporary
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ steps.variables.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          platforms: ${{ matrix.platform }}
          provenance: false
          load: true
          push: false

      # - name: Debug
      #   run: |
      #     echo "${{ steps.docker-build-push-temporary.outputs.metadata.image.name }}"

      # # https://github.com/anchore/grype/issues/648
      # - name: Grype [sarif] - scan container image
      #   uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
      #   id: grype-scan
      #   with:
      #     fail-build: false
      #     image: "${{ steps.docker-build-push-temporary.outputs.metadata.container.image }}"
      #     only-fixed: true
      #     output-format: sarif
      #     severity-cutoff: high

      # - name: Grype [table] - scan container image
      #   uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
      #   with:
      #     fail-build: ${{ inputs.container_image_vulnerability_scan }}
      #     image: "${{ steps.docker-build-push-temporary.outputs.metadata.container.image }}"
      #     only-fixed: true
      #     output-format: table
      #     severity-cutoff: high

      # - name: Publish SARIF to github code scanning
      #   if: ${{ always() && steps.grype-scan.outputs.sarif != '' && github.ref_name == github.event.repository.default_branch }}
      #   uses: github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169 # v3.28.0
      #   with:
      #     sarif_file: ${{ steps.grype-scan.outputs.sarif }}

      - name: Push image to container registries
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        id: docker-build-push
        if: ${{ env.container_registry_push_image == 'true' }}
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ steps.variables.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          platforms: ${{ matrix.platform }}
          provenance: false
          outputs: type=image,name=${{ env.DOCKER_METADATA_IMAGES_NAMES }},push-by-digest=true,name-canonical=true,push=true
          # annotations: ${{ steps.docker_meta.outputs.annotations }}
          # labels: ${{ steps.docker_meta.outputs.labels }}
          # tags: ${{ steps.docker_meta.outputs.tags }}

      # - name: Sign the images with GitHub OIDC Token (Non-interactive)
      #   if: ${{ steps.docker-build-push.outputs.digest != '' && (inputs.container_image_sign || inputs.release_tag != '') }}
      #   env:
      #     CONTAINER_IMAGE_PLATFORMS: ${{ env.container_image_platforms }}
      #     DOCKER_META_TAGS: ${{ steps.docker_meta.outputs.tags }}
      #     DOCKER_BUILD_PUSH_DIGEST: ${{ steps.docker-build-push.outputs.digest }}
      #   run: |
      #     for TAG in ${DOCKER_META_TAGS}; do
      #       cosign sign --yes "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #       # FIX **** XXXXXXXX ****
      #       # I have no idea how to properly create SBOMs for multi-arch container images: https://github.com/anchore/syft/issues/3562
      #       # for PLATFORM in ${CONTAINER_IMAGE_PLATFORMS//,/ }; do
      #       #   # I'm not sure if this is working correctly for cyclonedx, because "cosign download attestation --platform linux/arm64" doesn't work...
      #       #   syft attest --output cyclonedx-json --platform="${PLATFORM}" "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #       # done
      #       syft attest --output cyclonedx-json "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #     done

      - name: Remove docker credentials
        if: always()
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          readarray CONTAINER_REGISTRIES_ARRAY < <(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 '.[].registry')
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            docker logout "${CONTAINER_REGISTRY}"
          done

  # provenance:
  #   name: ${{ matrix.registry }} - provenance
  #   needs: [container-build]
  #   if: ${{ inputs.container_image_sign || inputs.release_tag != '' }}
  #   strategy:
  #     # https://github.com/orgs/community/discussions/26302
  #     matrix:
  #       include:
  #         # - registry: ghcr.io
  #         #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container
  #         #   username: ${{ github.actor }}
  #         #   password: ${{ secrets.GITHUB_TOKEN }}
  #         # - registry: quay.io
  #         #   image_name: quay.io/petr_ruzicka/malware-cryptominer-container
  #         #   username: ${{ secrets.container_registry_user }}
  #         #   password: ${{ secrets.container_registry_password }}
  #         # - registry: c8n.io
  #         #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container
  #         #   username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
  #         #   password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
  #         # - registry: docker.io
  #         #   image_name: docker.io/peru/malware-cryptominer-container
  #         #   username: ${{ secrets.dockerhub_container_registry_user }}
  #         #   password: ${{ secrets.dockerhub_container_registry_password }}
  #         # keep-sorted start
  #         - registry: c8n.io
  #           image_name: c8n.io/ruzickap-github/malware-cryptominer-container-test
  #           username: robot_ruzickap-github+github_actions_access
  #           password: c8n_container_registry_password
  #         - registry: docker.io
  #           image_name: docker.io/peru/malware-cryptominer-container-test
  #           username: peru
  #           password: dockerhub_container_registry_password
  #         - registry: ghcr.io
  #           image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container-test
  #           username: ${{ github.actor }}
  #           password: GITHUB_TOKEN
  #         - registry: quay.io
  #           image_name: quay.io/petr_ruzicka/malware-cryptominer-container-test
  #           username: petr_ruzicka+github_actions_access
  #           password: quay_container_registry_password
  #         # keep-sorted end
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
  #   with:
  #     image: ${{ matrix.image_name }}
  #     digest: ${{ needs.container-build.outputs.container_image_digest }}
  #     registry-username: ${{ matrix.username }}
  #   secrets:
  #     registry-password: ${{ secrets[matrix.password] }}

  # verify-signatures-provenance-sbom:
  #   name: Verify signatures and provenance for container images
  #   needs: [container-build, provenance]
  #   runs-on: ubuntu-latest
  #   if: ${{ inputs.container_image_sign || inputs.release_tag != '' }}
  #   steps:
  #     - name: Verify signatures, provenance and SBOM
  #       env:
  #         CONTAINER_IMAGE_PLATFORMS: ${{ env.container_image_platforms }}
  #         CONTAINER_REGISTRIES: ${{ env.container_registries }}
  #         CONTAINER_IMAGE_DIGEST: ${{ needs.container-build.outputs.container_image_digest }}
  #         COSIGN_CERTIFICATE_IDENTITY_REGEXP: ${{ github.event.repository.html_url }}/.github/workflows
  #         COSIGN_CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
  #         TRIVY_DISABLE_VEX_NOTICE: true
  #       run: |
  #         eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  #         brew install cosign regclient slsa-verifier trivy

  #         for CONTAINER_REGISTRY_IMAGE_NAME in $(echo "${CONTAINER_REGISTRIES}" | yq '.[].image_name'); do
  #           CONTAINER_REGISTRY_IMAGE="${CONTAINER_REGISTRY_IMAGE_NAME}@${CONTAINER_IMAGE_DIGEST}"
  #           echo "*** ${CONTAINER_REGISTRY_IMAGE_NAME}"

  #           cosign verify \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="slsaprovenance" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp='^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" 2>&1 | head -n 13 || true

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq '.payload | @base64d | fromjson | .predicate' > /tmp/attestation.json

  #           trivy sbom --quiet /tmp/attestation.json

  #           slsa-verifier verify-image --print-provenance --source-uri "github.com/${GITHUB_REPOSITORY}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign tree "${CONTAINER_REGISTRY_IMAGE}"

  #           cosign download attestation "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           regctl manifest get "${CONTAINER_REGISTRY_IMAGE}"
  #           regctl manifest get "${CONTAINER_REGISTRY_IMAGE/@*/}:${CONTAINER_IMAGE_DIGEST/:/-}.att"

  #           for PLATFORM in ${CONTAINER_IMAGE_PLATFORMS//,/ }; do
  #             regctl image config --platform="${PLATFORM}" "${CONTAINER_REGISTRY_IMAGE}"
  #           done

  #           # It should be possible to download the sbom/attestation per platform and check it by trivy/grype
  #           # cosign download attestation --platform linux/arm64 ....

  #           # Doesn't work !!!!
  #           # cosign download attestation \
  #           #   --platform=linux/amd64 \
  #           #   --predicate-type=https://cyclonedx.org/bom \
  #           #   quay.io/petr_ruzicka/malware-cryptominer-container-test@sha256:6e3b825d39cdeb829a0e49fec809b93e23af76d3254c6277c106600196f3f77f | jq -r .payload | base64 -d | jq .predicate
  #           #
  #           # This is working: https://images.chainguard.dev/directory/image/go/provenance
  #         done
