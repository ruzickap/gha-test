name: container-build-2

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Push the container image to the registry"
        type: boolean
        required: false
        default: false
      container_image_vulnerability_scan:
        description: "Scan the container image for vulnerabilities"
        type: boolean
        required: false
        default: true
      container_image_sign:
        description: "SBOM + Sign the container image"
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      container_registry_push:
        type: boolean
        required: true
      release_tag:
        type: string
        required: true
  push:
    branches-ignore:
      - renovate/*
    paths:
      - Dockerfile
      - .github/workflows/container-build-2.yml
  # schedule:
  #   - cron: "0 7 4 * *"

permissions:
  actions: read
  id-token: write # for creating OIDC tokens for signing
  contents: write
  packages: write # for uploading attestations
  security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  # keep-sorted start
  container_image_authors: petr.ruzicka@gmail.com
  container_image_authors_name: Petr Ruzicka
  container_image_category: security
  container_image_dockerfile_location: Dockerfile
  container_image_logo_url: https://raw.githubusercontent.com/MISP/intelligence-icons/513abc840b7ac92e4f8a4a7ecab2964007bf25f5/svg/threat_actor.svg
  container_image_platforms: linux/amd64,linux/arm64
  container_image_repository_url: https://quay.io/repository/petr_ruzicka/malware-cryptominer-container?tab=tags
  container_image_vendor: MyCompany
  container_registries: |
    # - registry: ghcr.io
    #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container
    #   username: ${{ github.actor }}
    #   password: ${{ secrets.GITHUB_TOKEN }}
    # - registry: quay.io
    #   image_name: quay.io/petr_ruzicka/malware-cryptominer-container
    #   username: ${{ secrets.container_registry_user }}
    #   password: ${{ secrets.container_registry_password }}
    # - registry: c8n.io
    #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container
    #   username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
    #   password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
    # - registry: docker.io
    #   image_name: docker.io/peru/malware-cryptominer-container
    #   username: ${{ secrets.dockerhub_container_registry_user }}
    #   password: ${{ secrets.dockerhub_container_registry_password }}
    # keep-sorted start
    - registry: c8n.io
      image_name: c8n.io/ruzickap-github/malware-cryptominer-container-test
      username: ${{ secrets.c8n_container_registry_user }}
      password: ${{ secrets.c8n_container_registry_password }}
    - registry: docker.io
      image_name: docker.io/peru/malware-cryptominer-container-test
      username: ${{ secrets.dockerhub_container_registry_user }}
      password: ${{ secrets.dockerhub_container_registry_password }}
    - registry: ghcr.io
      image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container-test
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}
    - registry: quay.io
      image_name: quay.io/petr_ruzicka/malware-cryptominer-container-test
      username: ${{ secrets.quay_container_registry_user }}
      password: ${{ secrets.quay_container_registry_password }}
    # keep-sorted end
  # Push the container image to the registry when triggered by a scheduled execution or a push to the default branch
  container_registry_push_image: ${{ github.event_name == 'schedule' || inputs.container_registry_push || (github.ref_name == github.event.repository.default_branch && github.event_name == 'push') }}
  # keep-sorted end

jobs:
  container-build-push:
    name: ${{ matrix.platform }} - build (and push)
    runs-on: ubuntu-latest
    outputs:
      container_image_digest: ${{ steps.docker-build-push.outputs.digest }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to docker
        if: ${{ env.container_registry_push_image == 'true' }}
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          # Login to all registries
          readarray CONTAINER_REGISTRIES_ARRAY < <(yq e -o=j -I=0 '.[]' <<< "${CONTAINER_REGISTRIES}")
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            REGISTRY="$(jq -r '.registry' <<< "${CONTAINER_REGISTRY}")"
            USERNAME="$(jq -r '.username' <<< "${CONTAINER_REGISTRY}")"
            PASSWORD="$(jq -r '.password' <<< "${CONTAINER_REGISTRY}")"
            docker login "${REGISTRY}" --username "${USERNAME}" --password-stdin <<< "${PASSWORD}"
          done

      - name: Set variables
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
          CONTAINER_IMAGE_DOCKERFILE_LOCATION: ${{ env.container_image_dockerfile_location }}
        run: |
          # Create list of image names for docker/metadata-action ("images" parameter)
          DOCKER_METADATA_IMAGES_NAMES="$(yq e -o=j -I=0 -r '[.[].image_name] | join(",")' <<< "${CONTAINER_REGISTRIES}")"
          echo "DOCKER_METADATA_IMAGES_NAMES=${DOCKER_METADATA_IMAGES_NAMES}" | tee -a "${GITHUB_ENV}"

          # Create list of image locations for docker/metadata-action ("labels" [io.artifacthub.package.alternative-locations] parameter)
          CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS=$(yq e '[.[].image_name] | join(",")' <<< "${CONTAINER_REGISTRIES}")
          echo "CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS=${CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS}" | tee -a "${GITHUB_OUTPUT}"

          # Create list of topics for io.artifacthub.package.keywords
          echo '${{ toJSON(github.event.repository.topics) }}' | jq -r '. | join(",") | "GITHUB_REPOSITORY_TOPICS=\(.)"' | tee -a "${GITHUB_ENV}"

          # Get the directory where the Dockerfile is located
          echo "CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY=$(dirname "${CONTAINER_IMAGE_DOCKERFILE_LOCATION}")" | tee -a "${GITHUB_ENV}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Build temporary container image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        id: docker-build-push-temporary
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ env.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: temporary_container-${{ github.run_id }}:latest

      - name: Grype [table] - scan container image
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
        with:
          fail-build: ${{ inputs.container_image_vulnerability_scan }}
          image: temporary_container-${{ github.run_id }}:latest
          only-fixed: true
          output-format: table
          severity-cutoff: high

      # https://github.com/anchore/grype/issues/648
      - name: Grype [sarif] - scan container image
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
        if: ${{ env.container_registry_push_image == 'true' }}
        id: grype-scan
        with:
          fail-build: false
          image: temporary_container-${{ github.run_id }}:latest
          only-fixed: true
          output-format: sarif
          severity-cutoff: high

      - name: Docker metadata
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        id: docker_meta
        with:
          labels: |
            # Replace deprecated NGINX maintainer: https://docs.docker.com/reference/dockerfile/#maintainer-deprecated (crane config nginxinc/nginx-unprivileged | jq '.config.Labels')
            maintainer=${{ env.container_image_authors }}

            ## https://artifacthub.io/docs/topics/repositories/container-images/
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/README.md
            # org.opencontainers.image.created - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            org.opencontainers.image.vendor=${{ env.container_image_vendor }}
            # org.opencontainers.image.version - it is there by default
            io.artifacthub.package.alternative-locations=${{ env.CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS }}
            io.artifacthub.package.category=${{ env.container_image_category }}
            io.artifacthub.package.keywords=${{ env.GITHUB_REPOSITORY_TOPICS }}
            io.artifacthub.package.license=${{ github.event.repository.license.spdx_id }}
            io.artifacthub.package.logo-url=${{ env.container_image_logo_url || 'https://raw.githubusercontent.com/kubernetes/community/487f994c013ea61d92cf9a341af7620037abbce3/icons/svg/resources/unlabeled/pod.svg' }}
            io.artifacthub.package.maintainers=[{"name":"${{ env.container_image_authors_name }}","email":"${{ env.container_image_authors }}"}]

            ## https://specs.opencontainers.org/image-spec/annotations/?v=v1.0.1#pre-defined-annotation-keys
            # org.opencontainers.image.created - it is there by default
            org.opencontainers.image.authors=${{ env.container_image_authors }}
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.documentation - already set
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.version - it is there by default
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.vendor - already set
            # org.opencontainers.image.licenses - it is there by default
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)

            # https://github.com/badouralix/dockerfiles/blob/c91181b356f92574f26d0499ee3d2be2cacd0952/LABELS.md
            com.github.actions.event_name=${{ github.event_name }}
            com.github.actions.job=${{ github.job }}
            com.github.actions.run_id=${{ github.run_id }}
            com.github.actions.run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Push image to container registries
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        if: ${{ env.container_registry_push_image == 'true' }}
        id: docker-build-push
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ env.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          platforms: ${{ matrix.platform }}
          provenance: false
          outputs: type=image,"name=${{ env.DOCKER_METADATA_IMAGES_NAMES }}",push-by-digest=true,name-canonical=true,push=true
          annotations: ${{ steps.docker_meta.outputs.labels }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Export digest
        if: ${{ steps.docker-build-push.outputs.digest != '' }}
        env:
          DIGEST: ${{ steps.docker-build-push.outputs.digest }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          mkdir -p /tmp/digests
          touch "/tmp/digests/${DIGEST#sha256:}"
          echo "PLATFORM_PAIR=${PLATFORM//\//-}" >> "${GITHUB_ENV}"

      - name: Upload digest
        if: ${{ steps.docker-build-push.outputs.digest != '' }}
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Publish SARIF to github code scanning
        if: ${{ steps.docker-build-push.outputs.digest != '' && steps.grype-scan.outputs.sarif != '' && github.ref_name == github.event.repository.default_branch }}
        uses: github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169 # v3.28.0
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

      - name: Remove docker credentials
        if: ${{ always() && env.container_registry_push_image == 'true' }}
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          readarray CONTAINER_REGISTRIES_ARRAY < <(yq e -o=j -I=0 '.[].registry' <<< "${CONTAINER_REGISTRIES}")
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            docker logout "${CONTAINER_REGISTRY}"
          done

  container-build-push-merge:
    name: merge container images and generate sbom, provenance and signatures
    runs-on: ubuntu-latest
    needs: [container-build-push]
    if: ${{ needs.container-build-push.outputs.container_image_digest != '' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Install cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@df80a981bc6edbc4e220a492d3cbe9f5547a6e75 # v0.17.9

      - name: Download digests
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to docker
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          # Login to all registries
          readarray CONTAINER_REGISTRIES_ARRAY < <(yq e -o=j -I=0 '.[]' <<< "${CONTAINER_REGISTRIES}")
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            REGISTRY="$(jq -r '.registry' <<< "${CONTAINER_REGISTRY}")"
            USERNAME="$(jq -r '.username' <<< "${CONTAINER_REGISTRY}")"
            PASSWORD="$(jq -r '.password' <<< "${CONTAINER_REGISTRY}")"
            docker login "${REGISTRY}" --username "${USERNAME}" --password-stdin <<< "${PASSWORD}"
          done

      - name: Set variables
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          # Create list of image names for docker/metadata-action ("images" parameter)
          DOCKER_METADATA_IMAGES_NAMES=$(yq e -o=j -I=0 -r '"name=" + .[].image_name' <<< "${CONTAINER_REGISTRIES}" )
          echo "DOCKER_METADATA_IMAGES_NAMES<<EOF"$'\n'"${DOCKER_METADATA_IMAGES_NAMES}"$'\n'EOF | tee -a "${GITHUB_ENV}"

      - name: Docker metadata
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: |
            ${{ env.DOCKER_METADATA_IMAGES_NAMES }}
          tags: |
            # Whever the pipeline runs form "main" - use "latest" container tag
            type=raw,value=latest,enable={{is_default_branch}}
            # When the pipeline is not executed form 'main' branch use "br-<mybranch>" tag
            type=ref,prefix=br-,event=branch,enable=${{ github.ref_name != github.event.repository.default_branch }}
            # Create "1.1.1", "1.1", "1" tags when called from release-please workflow (inputs.release_tag is "1.1.1")
            type=semver,pattern={{version}},value=${{ inputs.release_tag }},enable=${{ inputs.release_tag != '' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.release_tag }},enable=${{ inputs.release_tag != '' }}
            type=semver,pattern={{major}},value=${{ inputs.release_tag }},enable=${{ !startsWith(inputs.release_tag, '0.') }}
          flavor: |
            latest=false

      - name: Create manifest list and push
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        working-directory: /tmp/digests
        run: |
          for CONTAINER_REGISTRY_IMAGE_NAME in $(yq '.[].image_name' <<< "${CONTAINER_REGISTRIES}"); do
            # shellcheck disable=SC2046  # Quote this to prevent word splitting
            docker buildx imagetools create \
              $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "${DOCKER_METADATA_OUTPUT_JSON}") \
              $(printf "${CONTAINER_REGISTRY_IMAGE_NAME}@sha256:%s " *)
          done

      # - name: Sign the images with GitHub OIDC Token (Non-interactive)
      #   if: ${{ steps.docker-build-push.outputs.digest != '' && (inputs.container_image_sign || inputs.release_tag != '') }}
      #   env:
      #     CONTAINER_IMAGE_PLATFORMS: ${{ env.container_image_platforms }}
      #     DOCKER_META_TAGS: ${{ steps.docker_meta.outputs.tags }}
      #     DOCKER_BUILD_PUSH_DIGEST: ${{ steps.docker-build-push.outputs.digest }}
      #   run: |
      #     for TAG in ${DOCKER_META_TAGS}; do
      #       cosign sign --yes "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #       # FIX **** XXXXXXXX ****
      #       # I have no idea how to properly create SBOMs for multi-arch container images: https://github.com/anchore/syft/issues/3562
      #       # for PLATFORM in ${CONTAINER_IMAGE_PLATFORMS//,/ }; do
      #       #   # I'm not sure if this is working correctly for cyclonedx, because "cosign download attestation --platform linux/arm64" doesn't work...
      #       #   syft attest --output cyclonedx-json --platform="${PLATFORM}" "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #       # done
      #       syft attest --output cyclonedx-json "${TAG}@${DOCKER_BUILD_PUSH_DIGEST}"
      #     done

      - name: Remove docker credentials
        if: ${{ always() }}
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          readarray CONTAINER_REGISTRIES_ARRAY < <(yq e -o=j -I=0 '.[].registry' <<< "${CONTAINER_REGISTRIES}")
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            docker logout "${CONTAINER_REGISTRY}"
          done

  # provenance:
  #   name: ${{ matrix.registry }} - provenance
  #   needs: [container-build]
  #   if: ${{ inputs.container_image_sign || inputs.release_tag != '' }}
  #   strategy:
  #     # https://github.com/orgs/community/discussions/26302
  #     matrix:
  #       include:
  #         # - registry: ghcr.io
  #         #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container
  #         #   username: ${{ github.actor }}
  #         #   password: ${{ secrets.GITHUB_TOKEN }}
  #         # - registry: quay.io
  #         #   image_name: quay.io/petr_ruzicka/malware-cryptominer-container
  #         #   username: ${{ secrets.container_registry_user }}
  #         #   password: ${{ secrets.container_registry_password }}
  #         # - registry: c8n.io
  #         #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container
  #         #   username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
  #         #   password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
  #         # - registry: docker.io
  #         #   image_name: docker.io/peru/malware-cryptominer-container
  #         #   username: ${{ secrets.dockerhub_container_registry_user }}
  #         #   password: ${{ secrets.dockerhub_container_registry_password }}
  #         # keep-sorted start
  #         - registry: c8n.io
  #           image_name: c8n.io/ruzickap-github/malware-cryptominer-container-test
  #           username: robot_ruzickap-github+github_actions_access
  #           password: c8n_container_registry_password
  #         - registry: docker.io
  #           image_name: docker.io/peru/malware-cryptominer-container-test
  #           username: peru
  #           password: dockerhub_container_registry_password
  #         - registry: ghcr.io
  #           image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container-test
  #           username: ${{ github.actor }}
  #           password: GITHUB_TOKEN
  #         - registry: quay.io
  #           image_name: quay.io/petr_ruzicka/malware-cryptominer-container-test
  #           username: petr_ruzicka+github_actions_access
  #           password: quay_container_registry_password
  #         # keep-sorted end
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
  #   with:
  #     image: ${{ matrix.image_name }}
  #     digest: ${{ needs.container-build.outputs.container_image_digest }}
  #     registry-username: ${{ matrix.username }}
  #   secrets:
  #     registry-password: ${{ secrets[matrix.password] }}

  # verify-signatures-provenance-sbom:
  #   name: Verify signatures and provenance for container images
  #   needs: [container-build, provenance]
  #   runs-on: ubuntu-latest
  #   if: ${{ inputs.container_image_sign || inputs.release_tag != '' }}
  #   steps:
  #     - name: Verify signatures, provenance and SBOM
  #       env:
  #         CONTAINER_IMAGE_PLATFORMS: ${{ env.container_image_platforms }}
  #         CONTAINER_REGISTRIES: ${{ env.container_registries }}
  #         CONTAINER_IMAGE_DIGEST: ${{ needs.container-build.outputs.container_image_digest }}
  #         COSIGN_CERTIFICATE_IDENTITY_REGEXP: ${{ github.event.repository.html_url }}/.github/workflows
  #         COSIGN_CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
  #         TRIVY_DISABLE_VEX_NOTICE: true
  #       run: |
  #         eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  #         brew install cosign regclient slsa-verifier trivy

  #         for CONTAINER_REGISTRY_IMAGE_NAME in $(echo "${CONTAINER_REGISTRIES}" | yq '.[].image_name'); do
  #           CONTAINER_REGISTRY_IMAGE="${CONTAINER_REGISTRY_IMAGE_NAME}@${CONTAINER_IMAGE_DIGEST}"
  #           echo "*** ${CONTAINER_REGISTRY_IMAGE_NAME}"

  #           cosign verify \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="slsaprovenance" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp='^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" 2>&1 | head -n 13 || true

  #           cosign verify-attestation --type="https://cyclonedx.org/bom" \
  #             --certificate-oidc-issuer="${COSIGN_CERTIFICATE_OIDC_ISSUER}" \
  #             --certificate-identity-regexp="${COSIGN_CERTIFICATE_IDENTITY_REGEXP}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq '.payload | @base64d | fromjson | .predicate' > /tmp/attestation.json

  #           trivy sbom --quiet /tmp/attestation.json

  #           slsa-verifier verify-image --print-provenance --source-uri "github.com/${GITHUB_REPOSITORY}" \
  #             "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           cosign tree "${CONTAINER_REGISTRY_IMAGE}"

  #           cosign download attestation "${CONTAINER_REGISTRY_IMAGE}" | jq --color-output

  #           regctl manifest get "${CONTAINER_REGISTRY_IMAGE}"
  #           regctl manifest get "${CONTAINER_REGISTRY_IMAGE/@*/}:${CONTAINER_IMAGE_DIGEST/:/-}.att"

  #           for PLATFORM in ${CONTAINER_IMAGE_PLATFORMS//,/ }; do
  #             regctl image config --platform="${PLATFORM}" "${CONTAINER_REGISTRY_IMAGE}"
  #           done

  #           # It should be possible to download the sbom/attestation per platform and check it by trivy/grype
  #           # cosign download attestation --platform linux/arm64 ....

  #           # Doesn't work !!!!
  #           # cosign download attestation \
  #           #   --platform=linux/amd64 \
  #           #   --predicate-type=https://cyclonedx.org/bom \
  #           #   quay.io/petr_ruzicka/malware-cryptominer-container-test@sha256:6e3b825d39cdeb829a0e49fec809b93e23af76d3254c6277c106600196f3f77f | jq -r .payload | base64 -d | jq .predicate
  #           #
  #           # This is working: https://images.chainguard.dev/directory/image/go/provenance
  #         done
