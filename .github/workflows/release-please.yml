---
# GitHub Actions workflow for automated release management
# Creates release PRs and GitHub releases when changes are pushed to main
# https://github.com/googleapis/release-please
# https://danielscholl-osdu.github.io/osdu-fork-template/workflows/release/
name: release-please

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c # v4.3.0
        id: release
        with:
          release-type: simple
          # skip-github-pull-request: true

      - name: Checkout repository
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Tag major and minor versions
        if: ${{ steps.release.outputs.release_created }}
        env:
          MAJOR: ${{ steps.release.outputs.major }}
          MINOR: ${{ steps.release.outputs.minor }}
        run: |
          set -euxo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Get the current commit SHA
          SHA=$(git rev-parse HEAD)

          echo "🏷️ Tag commit: ${SHA}"
          echo "🔍 MAJOR: ${MAJOR}"
          echo "🔍 MINOR: ${MINOR}"
          echo "🚀 Release tag: v${MAJOR}.${MINOR}"

          git tag -f "v${MAJOR}" "${SHA}"
          git tag -f "v${MAJOR}.${MINOR}" "${SHA}"

          # Push tags to remote
          git push origin "v${MAJOR}"
          git push origin "v${MAJOR}.${MINOR}"

      - name: Collect comprehensive release metrics
        if: ${{ steps.release.outputs.release_created }}
        run: |
          # Calculate time since last release
          LAST_RELEASE_DATE=$(git log -1 --format=%ai "$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo HEAD)")
          DAYS_SINCE_RELEASE=$(( ($(date +%s) - $(date -d "${LAST_RELEASE_DATE}" +%s)) / 86400 ))

          # Count commits included in release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null)
          COMMIT_COUNT=$(git rev-list --count "${LAST_TAG:+$LAST_TAG..}HEAD")

          # Categorize changes by type
          FEAT_COUNT=$(git log --format=%s "${LAST_TAG:+$LAST_TAG..}HEAD" | grep -c "^feat:" || echo 0)
          FIX_COUNT=$(git log --format=%s "${LAST_TAG:+$LAST_TAG..}HEAD" | grep -c "^fix:" || echo 0)

          # Create summary file using cat
          cat << EOF | tee "${GITHUB_STEP_SUMMARY}"
          # 📊 Release Metrics

          - 🗓️ **Days since last release:** ${DAYS_SINCE_RELEASE}
          - 📦 **Total commits:** ${COMMIT_COUNT}
          - ✨ **Features:** ${FEAT_COUNT}
          - 🐛 **Bug fixes:** ${FIX_COUNT}
          EOF
