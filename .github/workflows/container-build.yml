name: container-build

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Push the image to Container Registry"
        type: boolean
        required: false
        default: false
      container_image_vulnerability_scan:
        description: "Scan the image for vulnerabilities"
        type: boolean
        required: false
        default: true
  push:
    tags:
      # For code tagging use 'v' prefix, but 'v' prefix should not be part of container tag
      - "v[0-9]+.[0-9]+.[0-9]+*"
    paths:
      - Dockerfile
      - .github/workflows/container-build.yml
  # schedule:
  #   - cron: "0 0 1 * *"

permissions:
  actions: read
  contents: write
  id-token: write
  packages: write
  security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

defaults:
  run:
    shell: bash -euxo pipefail {0}

env:
  # keep-sorted start
  TRIVY_DISABLE_VEX_NOTICE: true
  container_image_authors: petr.ruzicka@gmail.com
  container_image_authors_name: Petr Ruzicka
  container_image_category: security
  container_image_dockerfile_location: Dockerfile
  container_image_logo_url: https://raw.githubusercontent.com/MISP/intelligence-icons/513abc840b7ac92e4f8a4a7ecab2964007bf25f5/svg/threat_actor.svg
  container_image_platforms: linux/amd64,linux/arm64,linux/arm/v7
  container_image_repository_url: https://quay.io/repository/petr_ruzicka/malware-cryptominer-container?tab=tags
  container_image_vendor: MyCompany
  # push_to_ghcr: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule' || ( inputs.container_registry_push && inputs.push_to_ghcr ) }}
  container_registries: |
    # - registry: ghcr.io
    #   image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container
    #   username: ${{ github.actor }}
    #   password: ${{ secrets.GITHUB_TOKEN }}
    # - registry: quay.io
    #   image_name: quay.io/petr_ruzicka/malware-cryptominer-container
    #   username: ${{ secrets.container_registry_user }}
    #   password: ${{ secrets.container_registry_password }}
    # - registry: c8n.io
    #   image_name: c8n.io/ruzickap-github/malware-cryptominer-container
    #   username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
    #   password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
    # - registry: docker.io
    #   image_name: docker.io/peru/malware-cryptominer-container
    #   username: ${{ secrets.dockerhub_container_registry_user }}
    #   password: ${{ secrets.dockerhub_container_registry_password }}
    # keep-sorted start
    - registry: c8n.io
      image_name: c8n.io/ruzickap-github/malware-cryptominer-container-test
      username: ${{ secrets.C8N_CONTAINER_REGISTRY_USER }}
      password: ${{ secrets.C8N_CONTAINER_REGISTRY_PASSWORD }}
    - registry: docker.io
      image_name: docker.io/peru/malware-cryptominer-container-test
      username: ${{ secrets.dockerhub_container_registry_user }}
      password: ${{ secrets.dockerhub_container_registry_password }}
    - registry: ghcr.io
      image_name: ghcr.io/${{ github.repository_owner }}/malware-cryptominer-container-test
      username: ${{ github.actor }}
      password: ${{ secrets.GITHUB_TOKEN }}
    - registry: quay.io
      image_name: quay.io/petr_ruzicka/malware-cryptominer-container-test
      username: ${{ secrets.quay_container_registry_user }}
      password: ${{ secrets.quay_container_registry_password }}
    # keep-sorted end
  container_registry_push_image: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule' || inputs.container_registry_push }}
  # keep-sorted end

jobs:
  container-build:
    name: "ðŸ’¡ Build Container Image"
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2@sha256:543dade69668e02e5768d7ea2b0aa4fae6aa7384c9a5a8dbecc2be5136079ddb
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.2.0

      - name: Check if the tag exists in registry
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          CONTAINER_IMAGE_TAG=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          readarray IMAGE_NAME_ARRAY < <(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 '.[].image_name')

          # Check if the tag exists in registry - if yes - exit
          for IMAGE_NAME in "${IMAGE_NAME_ARRAY[@]}" ; do
            if docker manifest inspect "${IMAGE_NAME}:${CONTAINER_IMAGE_TAG}" ; then
              echo "*** Container tag \"${IMAGE_NAME}:${CONTAINER_IMAGE_TAG}\" already exists !!!"
              exit 1
            else
              echo "*** Container tag \"${IMAGE_NAME}:${CONTAINER_IMAGE_TAG}\" doesn't exist..."
            fi
          done

      # There is no way how to use docker/login-action for multiple registries in the same job - so we have to do it using "docker login"
      - name: Login to docker + set variables
        id: variables
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
          CONTAINER_IMAGE_DOCKERFILE_LOCATION: ${{ env.container_image_dockerfile_location }}
          CONTAINER_IMAGE_VULNERABILITY_SCAN: ${{ inputs.container_image_vulnerability_scan }}
        run: |
          readarray CONTAINER_REGISTRIES_ARRAY < <(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 '.[]')
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            REGISTRY=$(echo "${CONTAINER_REGISTRY}" | jq -r '.registry')
            USERNAME=$(echo "${CONTAINER_REGISTRY}" | jq -r '.username')
            PASSWORD=$(echo "${CONTAINER_REGISTRY}" | jq -r '.password')
            echo "${PASSWORD}" | docker login "${REGISTRY}" --username "${USERNAME}" --password-stdin
          done

          if [[ "${CONTAINER_IMAGE_VULNERABILITY_SCAN}" == "true" ]]; then
            echo "CONTAINER_IMAGE_VULNERABILITY_SCAN=1" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "CONTAINER_IMAGE_VULNERABILITY_SCAN=0" | tee -a "${GITHUB_OUTPUT}"
          fi

          DOCKER_METADATA_IMAGES_NAMES=$(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 -r '"name=" + .[].image_name')
          echo "DOCKER_METADATA_IMAGES_NAMES<<EOF"$'\n'"${DOCKER_METADATA_IMAGES_NAMES}"$'\n'EOF | tee -a "$GITHUB_OUTPUT"

          CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS=$(echo "${CONTAINER_REGISTRIES}" | yq e '[.[].image_name] | join(",")')
          echo "CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS=${CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS}" | tee -a "${GITHUB_OUTPUT}"

          echo '${{ toJSON(github.event.repository.topics) }}' | jq -r '. | join(",") | "GITHUB_REPOSITORY_TOPICS=\(.)"' | tee -a "${GITHUB_OUTPUT}"

          echo "CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY=$(dirname "${CONTAINER_IMAGE_DOCKERFILE_LOCATION}")" | tee -a "${GITHUB_OUTPUT}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        with:
          driver-opts: network=host

      - name: Docker metadata
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        id: docker_meta
        with:
          images: |
            ${{ steps.variables.outputs.DOCKER_METADATA_IMAGES_NAMES }}
          tags: |
            # Whever the pipeline runs form "main" - use "latest" container tag
            type=raw,value=latest,enable={{is_default_branch}}
            # When the pipeline is not executed form 'main' branch use "br-<mybranch>" tag
            type=ref,prefix=br-,event=branch,enable=${{ github.ref_name != github.event.repository.default_branch }}
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            # Do not create "0" container image tag (only "1", "2", "3" and so on)
            type=semver,pattern={{major}},event=tag,enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          labels: |
            # Replace deprecated NGINX maintainer: https://docs.docker.com/reference/dockerfile/#maintainer-deprecated (crane config nginxinc/nginx-unprivileged | jq '.config.Labels')
            maintainer=${{ env.container_image_authors }}

            ## https://artifacthub.io/docs/topics/repositories/container-images/
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/README.md
            # org.opencontainers.image.created - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            org.opencontainers.image.vendor=${{ env.container_image_vendor }}
            # org.opencontainers.image.version - it is there by default
            io.artifacthub.package.alternative-locations=${{ steps.variables.outputs.CONTAINER_IMAGE_ALTERNATIVE_LOCATIONS }}
            io.artifacthub.package.category=${{ env.container_image_category }}
            io.artifacthub.package.keywords=${{ steps.variables.outputs.GITHUB_REPOSITORY_TOPICS }}
            io.artifacthub.package.license=${{ github.event.repository.license.spdx_id }}
            io.artifacthub.package.logo-url=${{ env.container_image_logo_url || 'https://raw.githubusercontent.com/kubernetes/community/487f994c013ea61d92cf9a341af7620037abbce3/icons/svg/resources/unlabeled/pod.svg' }}
            io.artifacthub.package.maintainers=[{"name":"${{ env.container_image_authors_name }}","email":"${{ env.container_image_authors }}"}]

            ## https://specs.opencontainers.org/image-spec/annotations/?v=v1.0.1#pre-defined-annotation-keys
            # org.opencontainers.image.created - it is there by default
            org.opencontainers.image.authors=${{ env.container_image_authors }}
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.documentation - already set
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.version - it is there by default
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.vendor - already set
            # org.opencontainers.image.licenses - it is there by default
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)

      - name: Build container image and push it to local container registry
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ steps.variables.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          push: true
          platforms: ${{ env.container_image_platforms }}
          provenance: true
          sbom: true
          tags: localhost:5000/name/container-image:latest
          labels: ${{ steps.docker_meta.outputs.labels }}

      ##########################################################################
      # Trivy
      ##########################################################################

      # # Two separate Trivy actions are needed because of https://github.com/aquasecurity/trivy/issues/3243
      # - name: Trivy - scan container image
      #   uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # 0.28.0
      #   env:
      #     # https://github.com/aquasecurity/trivy-action/issues/279
      #     TRIVY_PLATFORM: linux/amd64
      #   with:
      #     hide-progress: true
      #     ignore-unfixed: true
      #     image-ref: localhost:5000/name/container-image:latest
      #     format: json
      #     output: trivy-results.json
      #     severity: CRITICAL,HIGH
      #     scanners: vuln,secret,misconfig

      # - name: Upload build artifact
      #   uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      #   with:
      #     name: trivy-results.json
      #     path: trivy-results.json
      #     if-no-files-found: error
      #     retention-days: 1

      # - name: Trivy - scan container image
      #   uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # 0.28.0
      #   env:
      #     TRIVY_PLATFORM: linux/amd64
      #   with:
      #     exit-code: ${{ steps.variables.outputs.CONTAINER_IMAGE_VULNERABILITY_SCAN }}
      #     hide-progress: true
      #     ignore-unfixed: true
      #     image-ref: localhost:5000/name/container-image:latest
      #     format: table
      #     severity: CRITICAL,HIGH
      #     scanners: vuln,secret
      #     skip-setup-trivy: true

      # - name: GitHub Summary
      #   if: ${{ !cancelled() }}
      #   run: |
      #     trivy convert --format sarif --output trivy-results.sarif trivy-results.json
      #     trivy convert --format table --output trivy-results.table trivy-results.json

      #     cat << EOF | tee -a $GITHUB_STEP_SUMMARY
      #       ### Container Image Scan
      #       <details><summary>Click to expand</summary>
      #       \`\`\`markdown
      #       $(cat trivy-results.table)
      #       \`\`\`
      #       </details>
      #     EOF

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: ${{ !cancelled() }}
      #   with:
      #     sarif_file: trivy-results.sarif
      #     category: trivy

      # https://github.com/anchore/grype/issues/648
      - name: Grype [sarif] - scan container image
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
        id: grype-scan
        with:
          fail-build: false
          image: localhost:5000/name/container-image:latest
          only-fixed: true
          output-format: sarif
          severity-cutoff: high

      - name: Grype [table] - scan container image
        uses: anchore/scan-action@abae793926ec39a78ab18002bc7fc45bbbd94342 # v6.0.0
        with:
          fail-build: ${{ inputs.container_image_vulnerability_scan }}
          image: localhost:5000/name/container-image:latest
          only-fixed: true
          output-format: table
          severity-cutoff: high

      - name: Publish SARIF to github code scanning
        if: ${{ always() && steps.grype-scan.outputs.sarif != '' && github.ref_name == github.event.repository.default_branch }}
        uses: github/codeql-action/upload-sarif@48ab28a6f5dbc2a99bf1e0131198dd8f1df78169 # v3.28.0
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

      - name: Push image to container registries
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        id: docker-build-push
        if: ${{ env.container_registry_push_image == 'true' }}
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          file: ${{ env.container_image_dockerfile_location }}
          context: ${{ steps.variables.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          push: true
          platforms: ${{ env.container_image_platforms }}
          provenance: true
          sbom: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Sign the images with GitHub OIDC Token (Non-interactive)
        env:
          DOCKER_META_TAGS: ${{ steps.docker_meta.outputs.tags }}
          DOCKER_BUILD_PUSH_DIGEST: ${{ steps.docker-build-push.outputs.digest }}
        run: |
          for TAG in ${DOCKER_META_TAGS}; do
            IMAGES+="${TAG}@${DOCKER_BUILD_PUSH_DIGEST} "
          done
          echo cosign sign --yes "${IMAGES}"

      - name: Remove docker credentials
        if: always()
        env:
          CONTAINER_REGISTRIES: ${{ env.container_registries }}
        run: |
          readarray CONTAINER_REGISTRIES_ARRAY < <(echo "${CONTAINER_REGISTRIES}" | yq e -o=j -I=0 '.[]')
          for CONTAINER_REGISTRY in "${CONTAINER_REGISTRIES_ARRAY[@]}"; do
            REGISTRY=$(echo "${CONTAINER_REGISTRY}" | jq -r '.registry')
            docker logout "${REGISTRY}"
          done
