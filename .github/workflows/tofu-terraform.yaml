---
name: tofu-terraform

# Use-cases:
# * When new PR is opened with changes in `terraform` directory - run `terraform plan`
# * When PR is merged with changes in `terraform` directory - run `terraform apply`
# * When PR is labeled by `tofu-plan/apply/destroy` - run `terraform plan/apply/destroy`
# * When scheduled - run `terraform plan` and open an issue on configuration drift
# * When manually called using workflow_dispatch - run `terraform plan/apply/destroy`

on:
  workflow_dispatch:
    inputs:
      tofu_command:
        description: tofu main command
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan
  push:
    paths:
      - terraform/**
  pull_request:
    types: [opened, synchronize, labeled]
    paths:
      - terraform/**
  schedule:
    - cron: 0 0 * * *

permissions: read-all

env:
  AWS_REGION: eu-central-1
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  TOFU_WORKING_DIRECTORY: terraform

# Use concurrency to prevent running tofu-terraform simultaneously
concurrency:
  group: tofu-terraform

defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  tofu-terraform:
    runs-on: ubuntu-latest
    permissions:
      actions: read # Required to identify workflow run
      checks: write # Required to add status summary
      contents: read # Required to checkout repository
      id-token: write # Required to identify workflow run
      pull-requests: write # Required to add comment and label

    steps:
      - name: debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GITHUB_CONTEXT}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # v4.0.3
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Set variables
        id: variables
        env:
          GITHUB_EVENT_PULL_REQUEST_MERGED: ${{ github.event.pull_request.merged }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_LABEL: ${{ contains(github.event.pull_request.labels.*.name, 'tofu-plan') && 'tofu-plan' || contains(github.event.pull_request.labels.*.name, 'tofu-apply') && 'tofu-apply' || contains(github.event.pull_request.labels.*.name, 'tofu-destroy') && 'tofu-destroy' }}
          INPUTS_COMMAND: ${{ inputs.tofu_command }}
        run: |
          echo "PR_LABEL=${PR_LABEL}" | tee -a "${GITHUB_ENV}"

          # If inputs.tofu_command form workflow_dispatch is set - use it as tofu_command
          if [[ -z "${INPUTS_COMMAND}" ]]; then
            # Use "plan" as default command - it should be used for scheduled runs and when PR is opened
            echo "TOFU_COMMAND=plan" | tee -a "${GITHUB_ENV}"

            if [[ "${GITHUB_EVENT_PULL_REQUEST_MERGED}" == "true" ]]; then
              echo "TOFU_COMMAND=apply" | tee -a "${GITHUB_ENV}"
            fi

            case "${PR_LABEL}" in
              tofu-apply)
                echo "TOFU_COMMAND=apply" | tee -a "${GITHUB_ENV}"
                ;;
              tofu-destroy)
                echo "TOFU_COMMAND=destroy" | tee -a "${GITHUB_ENV}"
                ;;
            esac
          else
            echo "TOFU_COMMAND=${INPUTS_COMMAND}" | tee -a "${GITHUB_ENV}"
          fi

      - name: ðŸ’¡ Run tofu "${{ env.TOFU_COMMAND }}"
        env:
          TOFU_COMMAND: ${{ env.TOFU_COMMAND }}
          TOFU_WORKING_DIRECTORY: ${{ env.TOFU_WORKING_DIRECTORY }}
        run: |
          tofu -chdir="${TOFU_WORKING_DIRECTORY}" init
          tofu -chdir="${TOFU_WORKING_DIRECTORY}" "${TOFU_COMMAND}" | ruby -pe 'print Time.now.strftime("[%Y-%m-%d %H:%M:%S] ")'

      - name: Remove label
        if: ${{ env.PR_LABEL != 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PR_LABEL: ${{ env.PR_LABEL }}
        run: gh api "/repos/{owner}/{repo}/issues/${PR_NUMBER}/labels/${PR_LABEL}" --method DELETE
